Наиболее распространённые проблемы:
Учёт расстояния до 0 вектора (предложение очевидно будет иметь 100% сходство с самим собой).
Составление словаря не с индексами, а с порядковыми номерами вхождения слов (т.е. учёт номера слова в тексте с учётом повторения, тогда числа в словаре будут сильно больше 400!).
Индекс слова- номер его ПЕРВОГО вхождения в текст.
Поиск вхождения слова в строке как подстроки (предлог 'at' найдётся не только полноценным предлогом, но и внутри слова 'cat'), как правило хорошо заметно при выводе итоговой матрицы весов (в ней будут аномально большие коэффициенты 7 и более, а сумма всех весов в матрице будет превышать число слов в тексте). Как правило приводит к определению в качестве ответа 1 и 4 предложений (что неверно).
Матрица весов (22 * 254) должна содержать количество данных слов в ПРЕДЛОЖЕНИИ. Т.е. Если слово 'a' встречается в 1й строке 2 раза, а во всём тексте 22, то в первой строке в ячейке, соответствующей этому слову будет 2.
Косинуское расстояние и косинус угла - разные величины! Прочитайте описание функции косинусного расстояния в документации!
Передача в ответ не номеров предложений, а значений косинусных расстояний.
Какие темы изучить/повторить?

import модуля
открытие файлов (чтение, запись, file = open('file_name.txt', 'r'))
чтение файла построчно (file.xreadlines())
циклы (for)
списки (создание пустого, добавление элемента, получение элемента по его id, изменение элемента)
цикл по элемента списка (for element in list:)
список списков
изменение регистра символов в строке (line.lower())
получение списка из строки с использованием регулярного выражения (не описанный в курсе модуль RE - re.split()). Небольшой пример: https://github.com/Coursera-machine-learning-data-analysis/1/blob/master/3.ipynb
if, elif, else
словари (создание пустого, добавление элемента с ключом и значением)
проверка на наличие в словаре ключа
numpy массивы
numpy.zeros()
len() (для строк, списков, словарей)
range(n)
+=
вычисление косинусного расстояния (не описанная в курсе функция scipy.spatial.distance.cosine())
нахождение минимального/максимального (или нескольких) значения в массиве
